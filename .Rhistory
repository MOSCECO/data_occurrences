USE.NAMES = T
)
return(dataset_threshold)
}
)
species_all_incidences
species$GLP$majo
species$GLP$majo %>% dim()
species$GLP$muri %>% dim()
species$MTQ$muri %>% dim()
species$MTQ$majo %>% dim()
names(stations_nearest)
isl <- "ANT"
# isl <- "ANT"
path_data_incidence_isl <- here(path_figures_occthr, isl)
makeMyDir(path_data_incidence_isl)
tax     <- taxa[[2]]
title_tax    <- names(taxa)[[2]]
col_tax <- colors_taxa[[1]]
path_data_incidence_isl_tax <- here(path_data_incidence_isl, title_tax)
makeMyDir(path_data_incidence_isl_tax)
tb <- species[[isl]][[tax]]
tb
tax
species$GLP$majo
isl
# modification du jeu de données en autochtones / partagées
by_islands_species <- species
species <- list(
ANT = common_species,
GLP = autoch_species$GLP,
MTQ = autoch_species$MTQ
)
# Pour toutes les espèces, création d'un jeu de données présences/absences
# avec les coordonnées nouvelles créées plus haut
species_all_incidences <- species
occurrences <- lapply(
names(stations_nearest),
# names(stations),
function(isl) {
# isl <- "ANT"
path_data_incidence_isl <- here(path_figures_occthr, isl)
makeMyDir(path_data_incidence_isl)
dataset_threshold <- mapply(
function(tax, title_tax, col_tax) {
# tax     <- taxa[[2]]
# title_tax    <- names(taxa)[[2]]
# col_tax <- colors_taxa[[1]]
path_data_incidence_isl_tax <- here(path_data_incidence_isl, title_tax)
makeMyDir(path_data_incidence_isl_tax)
tb <- species[[isl]][[tax]]
tc <- count(tb, scientificName)
tc <- tc[order(-tc$n), ]
tc_threshold <- tc[tc$n >= THRESH, ]
tb_threshold <- tb %>%
filter(scientificName %in% tc_threshold$scientificName)
# Changer les stations de présence pour les stations corrigées
# à partir de l'objet stations_nearest
names(ngb_val)[2] <- "collectStation"
v <- tb_threshold$collectStation %in% ngb_val$collectStation
vs <- tibble(collectStation = tb_threshold[v, "collectStation"])
vs <- vs %>% left_join(ngb_val[, c("collectStation", "to_x", "to_y")])
tb_threshold[v, c("decimalLongitude", "decimalLatitude")] <-
vs[, c("to_x", "to_y")]
tb_split <- split(tb_threshold, f = tb_threshold$scientificName)
tbs_absences <- lapply(
tb_split,
function(spe) {
# presences/incidence ----
path_data_incidence_isl_tax_inci <- here(
path_data_incidence_isl_tax, "incidence"
)
makeMyDir(path_data_incidence_isl_tax_inci)
# spe <- tb_split$`Coralliophila salebrosa`
# spe <- tb_split$`Mithraculus coryphe`
bn_spe <- unique(spe$scientificName)
# sauvegarde
write.csv(
spe,
here(
path_data_incidence_isl_tax_inci,
paste(
"incidence",
"dataset",
"nearest",
gsub(" ", "-", bn_spe),
sep = "_"
) %>% paste0(".csv")
),
row.names = F
)
# absences ----
path_data_incidence_isl_tax_abse <- here(
path_data_incidence_isl_tax, "absences"
)
makeMyDir(path_data_incidence_isl_tax_abse)
# in the same table format as presences
absences <- stations_nearest[[isl]] %>%
# absences <- stations[[isl]] %>%
filter(!collectEvent %in% spe$collectStation)
absences <- absences %>%
add_column(
occurrenceID = NA,
database = NA,
CD_NOM = unique(spe$CD_NOM)[[1]],
CD_REF = unique(spe$CD_REF),
aphiaID = unique(spe$aphiaID),
family = unique(spe$family),
scientificName = unique(spe$scientificName),
author = unique(spe$author)[[1]],
coordinateUncertaintyInMeters = NA,
individualCount = 0,
citation = NA,
expedition = NA,
basisOfRecord = "absence",
institutionCode = NA,
collectionCode = NA,
catalogNumber = NA
) %>%
select(
collectStation = collectEvent,
country = country_iso2,
everything())
absences <- absences %>%
select(all_of(names(spe)))
# suppression des dupliqués
absences <- absences %>%
st_drop_geometry() %>%
add_column(ABS = TRUE)
spe <- spe %>%
add_column(ABS = FALSE)
all_occ <- spe %>%
rbind(absences)
all_occ <- all_occ %>%
filter(
!duplicated(
all_occ %>%
select(eventDate, decimalLongitude, decimalLatitude)
)
)
absences <- all_occ %>%
filter(ABS)
absences <- absences %>%
select(-ABS)
# sauvegarde
write.csv(
absences,
here(
path_data_incidence_isl_tax_abse,
paste(
"absence",
"dataset",
"nearest",
gsub(" ", "-", bn_spe),
sep = "_"
) %>% paste0(".csv")
),
row.names = F
)
return(absences)
}
)
list_out <- list(
incidnc = tb_threshold,
absence = do.call(rbind, tbs_absences)
)
return(list_out)
},
taxa,
Taxa,
colors_taxa,
SIMPLIFY = F,
USE.NAMES = T
)
return(dataset_threshold)
}
)
names(occurrences) <- names(species)
# séparation présences / absences
species <- list(
ANT = list(
majo = occurrences$ANT$Majoidea$incidnc,
muri = occurrences$ANT$Muricidae$incidnc
),
GLP = list(
majo = occurrences$GLP$Majoidea$incidnc,
muri = occurrences$GLP$Muricidae$incidnc
),
MTQ = list(
majo = occurrences$MTQ$Majoidea$incidnc,
muri = occurrences$MTQ$Muricidae$incidnc
)
)
absence <- list(
ANT = list(
majo = occurrences$ANT$Majoidea$absence,
muri = occurrences$ANT$Muricidae$absence
),
GLP = list(
majo = occurrences$GLP$Majoidea$absence,
muri = occurrences$GLP$Muricidae$absence
),
MTQ = list(
majo = occurrences$MTQ$Majoidea$absence,
muri = occurrences$MTQ$Muricidae$absence
)
)
# sauvegarde en rds
saveRDS(
species,
here(
"data",
"tidy",
"occ_threshold",
paste("species", paste0("threshold", THRESH), "incidence", "nearest",
sep = "_") %>%
paste0(".rds")
)
)
saveRDS(
absence,
here(
"data",
"tidy",
"occ_threshold",
paste("species", paste0("threshold", THRESH), "absence", "nearest",
sep = "_") %>%
paste0(".rds")
)
)
# sets of presence/absences
pa <- mapply(
\(s, a) {
mapply(
\(x, y) {
z <- rbind(x, y)
return(split(z, f = z$scientificName))
},
s,
a,
SIMPLIFY = F,
USE.NAMES = T
)
},
species,
absence,
SIMPLIFY = F,
USE.NAMES = T
)
path_figures_carte_pas <- here("figures", "cartes_de_distribution_pa_seuil")
makeMyDir(path_figures_carte_pas)
# Occurrences spatialisées de chaque espèce
offsets_title_tax <- list(
GLP = c(x = - 1.01,  y = - 0.05),
MTQ = c(x = - 0.47,  y = - 0.03)
)
dimensions_ggexport <- list(
ANT = c(width = 4200, height = 2000, res = 200),
GLP = c(width = 2300, height = 2000, res = 200),
MTQ = c(width = 1850, height = 2000, res = 200)
)
# dataframe of all shared species of more than 30 specimens ----
TBC <- do.call(
rbind,
lapply(
names(pa),
\(isl) {
do.call(
rbind,
lapply(
names(pa[[isl]]),
\(tax) {
tb2 <- do.call(
rbind,
lapply(
pa[[isl]][[tax]],
\(tb1) {
tb1 <- tb1 %>%
add_column(TAX = tax)
}
)
)
tb2 <- if(!is.null(tb2)) {
tb2 %>% add_column(ISL = isl)
}
}
)
)
}
)
)
TBC_list <- TBC %>% split(f = TBC$scientificName)
TBC_list <- TBC_list[sort(names(TBC_list))]
saveRDS(TBC_list, here("data", "tidy", "occ_threshold",
"list_occ_thresh_nearest.rds"))
TBC_list
names(TBC_list)
View(TBC)
names(TBC)
View(TBC)
# rédaction d'une table pour mettre en évidence les espèces qui seront
# modélisées en priorité
summary_species30 <- cbind(
`Taxon` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$TAX)) == "muri", "Muricidae", "Majoidea"
),
`Espèce` = names(TBC_list),
`Nombre d'occurrences` = TBC_list %>% lapply(dim),
`Autochtone?` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "ANT",
"Partagée (Guadeloupe/Martinique)",
paste0("Autochtone (", TBC_list %>% lapply(\(tb) unique(tb$ISL)), ")")
)
)
View(summary_species30)
# rédaction d'une table pour mettre en évidence les espèces qui seront
# modélisées en priorité
summary_species30 <- cbind(
`Taxon` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$TAX)) == "muri", "Muricidae", "Majoidea"
),
`Espèce` = names(TBC_list),
`Nombre d'occurrences` = TBC_list %>% lapply(nrow),
`Autochtone?` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "ANT",
"Partagée (Guadeloupe/Martinique)",
paste0("Autochtone (", TBC_list %>% lapply(\(tb) unique(tb$ISL)), ")")
)
)
View(TBC_list$`Amphithrax hemphilli`)
# rédaction d'une table pour mettre en évidence les espèces qui seront
# modélisées en priorité
summary_species30 <- cbind(
`Taxon` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$TAX)) == "muri", "Muricidae", "Majoidea"
),
`Espèce` = names(TBC_list),
`Nombre d'occurrences` = TBC_list %>%
lapply(\(tb) sum(tb$individualCount != 0)),
`Autochtone?` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "ANT",
"Partagée (Guadeloupe/Martinique)",
paste0("Autochtone (", TBC_list %>% lapply(\(tb) unique(tb$ISL)), ")")
)
)
summary_species30
View(summary_species30)
# rédaction d'une table pour mettre en évidence les espèces qui seront
# modélisées en priorité
summary_species30 <- cbind(
`Taxon` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$TAX)) == "muri", "Muricidae", "Majoidea"
),
`Espèce` = names(TBC_list),
`Nombre d'occurrences` = TBC_list %>%
lapply(\(tb) sum(tb$individualCount != 0)),
`Autochtone?` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "ANT",
"Partagée (Guadeloupe/Martinique)",
paste0(
"Autochtone (",
ifelse(TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "MTQ", "Martinique", "Guadeloupe"),
")"
)
)
)
View(summary_species30)
summary_species30 <- summary_species30 %>%
group_by(Taxon, `Espèce`) %>%
arrange(.by_group = T)
summary_species30 <- summary_species30 %>%
as.data.frame() %>%
group_by(Taxon, `Espèce`) %>%
arrange(.by_group = T)
View(TBC_list$`Claremontiella nodulosa`)
a <- TBC_list$`Claremontiella nodulosa`
e <- paste(a$decimalLatitude, a$decimalLongitude)
table(duplicated(e))
a <- TBC_list$`Claremontiella nodulosa` %>%
filter(individualCount > 0)
e <- paste(a$decimalLatitude, a$decimalLongitude)
table(duplicated(e))
# rédaction d'une table pour mettre en évidence les espèces qui seront
# modélisées en priorité
summary_species30 <- cbind(
`Taxon` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$TAX)) == "muri", "Muricidae", "Majoidea"
),
`Espèce` = names(TBC_list),
`Nombre d'occurrences (non filtré)` = TBC_list %>%
lapply(\(tb) sum(tb$individualCount != 0)),
`Autochtone?` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "ANT",
"Partagée (Guadeloupe/Martinique)",
paste0(
"Autochtone (",
ifelse(TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "MTQ", "Martinique", "Guadeloupe"),
")"
)
)
)
summary_species30 <- summary_species30 %>%
as.data.frame() %>%
group_by(Taxon, `Espèce`) %>%
arrange(.by_group = T)
View(summary_species30)
write_csv(
summary_species30,
here("data", "tidy", "occ_threshold", "summary_species30.csv")
)
summary_species30
# rédaction d'une table pour mettre en évidence les espèces qui seront
# modélisées en priorité
summary_species30 <- cbind(
`Taxon` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$TAX)) == "muri", "Muricidae", "Majoidea"
),
`Espèce` = names(TBC_list),
`Nombre d'occurrences (non filtré)` = TBC_list %>%
lapply(\(tb) sum(tb$individualCount != 0)),
`Autochtone?` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "ANT",
"Partagée (Guadeloupe/Martinique)",
paste0(
"Autochtone (",
ifelse(TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "MTQ", "Martinique", "Guadeloupe"),
")"
)
)
)
summary_species30 <- summary_species30 %>%
as.data.frame() %>%
group_by(Taxon, `Espèce`) %>%
arrange(.by_group = T)
View(summary_species30)
summary_species30
class(summary_species30)
# rédaction d'une table pour mettre en évidence les espèces qui seront
# modélisées en priorité
summary_species30 <- cbind(
`Taxon` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$TAX)) == "muri", "Muricidae", "Majoidea"
),
`Espèce` = names(TBC_list),
`Nombre d'occurrences (non filtré)` = TBC_list %>%
lapply(\(tb) sum(tb$individualCount != 0)),
`Autochtone?` = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "ANT",
"Partagée (Guadeloupe/Martinique)",
paste0(
"Autochtone (",
ifelse(TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "MTQ", "Martinique", "Guadeloupe"),
")"
)
)
)
summary_species30 <- summary_species30 %>%
as.data.frame() %>%
group_by(Taxon, `Espèce`) %>%
arrange(.by_group = T) %>%
as.data.frame()
write_csv(
summary_species30,
here("data", "tidy", "occ_threshold", "summary_species30.csv"),
row.names = FALSE
)
write_csv(
summary_species30,
here("data", "tidy", "occ_threshold", "summary_species30.csv")
)
write.csv(
summary_species30,
here("data", "tidy", "occ_threshold", "summary_species30.csv"),
row.names = F
)
summary_species30
class(summary_species30)
View(summary_species30)
write.csv(
summary_species30,
here("data", "tidy", "occ_threshold", "summary_species30.csv"),
row.names = F
)
# rédaction d'une table pour mettre en évidence les espèces qui seront
# modélisées en priorité
summary_species30 <- cbind(
Taxon = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$TAX)) == "muri", "Muricidae", "Majoidea"
),
Espece = names(TBC_list),
Nombre_occurrences = TBC_list %>%
lapply(\(tb) sum(tb$individualCount != 0)),
Autochtone = ifelse(
TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "ANT",
"Partagée (Guadeloupe/Martinique)",
paste0(
"Autochtone (",
ifelse(TBC_list %>% lapply(\(tb) unique(tb$ISL)) == "MTQ", "Martinique", "Guadeloupe"),
")"
)
)
)
summary_species30 <- summary_species30 %>%
as.data.frame() %>%
group_by(Taxon, `Espèce`) %>%
arrange(.by_group = T) %>%
as.data.frame()
write.csv(
summary_species30,
here("data", "tidy", "occ_threshold", "summary_species30.csv"),
row.names = F
)
